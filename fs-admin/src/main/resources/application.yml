server:
  port: 8081
  undertow:
    threads:
      io: 8
      # 它的值设置取决于系统线程执行任务的阻塞系数，默认值是IO线程数*8
      worker: 256
    buffer-size: 1024
    # 是否分配的直接内存(NIO直接分配的堆外内存)
    direct-buffers: true
spring:
  application:
    name: free-fs
  profiles:
    active: dev
  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB

--- # mybatis-flex配置
mybatis-flex:
  # 搜索指定包别名
  type-aliases-package: com.free.fs.domain
  # 不支持多包, 如有需要可在注解配置 或 提升扫包等级：com.**.**.mapper
  mapper-package: com.free.fs.mapper
  # 配置mapper的扫描，找到所有的mapper.xml映射文件
  mapper-locations: classpath*:mapper/*Mapper.xml
  configuration:
    ## 以下为mybatis原生配置 https://mybatis.org/mybatis-3/zh/configuration.html
    # 自动驼峰命名规则（camel case）映射
    map_underscore_to_camel_case: true
    # MyBatis 自动映射策略
    # NONE：不启用 PARTIAL：只对非嵌套 resultMap 自动映射 FULL：对所有 resultMap 自动映射
    auto_mapping_behavior: FULL
    # MyBatis 自动映射时未知列或未知属性处理策
    # NONE：不做处理 WARNING：打印相关警告 FAILING：抛出异常和详细信息
    auto_mapping_unknown_column_behavior: NONE
    # 更详细的日志输出 会有性能损耗 org.apache.ibatis.logging.stdout.StdOutImpl
    # 关闭日志记录 org.apache.ibatis.logging.nologging.NoLoggingImpl
    # 默认日志输出 org.apache.ibatis.logging.slf4j.Slf4jImpl
    #log_impl: org.apache.ibatis.logging.stdout.StdOutImpl
    logImpl: org.apache.ibatis.logging.nologging.NoLoggingImpl
    cacheEnabled: true
  global-config:
    # 是否控制台打印 MyBatis-Flex 的 LOGO 及版本号
    print-banner: false

--- # fs配置
fs:
  api:
    prefix: /api/v1
  # 上传配置 [#TODO 废弃 待删除]
  uploader:
    type: minio
    local:
      # 文件上传地址, 这里的意思就是本地模式下，上传的文件会保存到 `uploadPath`路径里，然后通过 `uploadMapping` 映射
      # 通俗点就是 E:/upload/xxx.jpg 会映射到 http://localhost:8081/uploads/xxx.jpg
      uploadDir: /data/free-fs/upload/
      uploadMapping: /uploads
      # 生产环境请填写公网地址或者域名，如果不写，默认http://127.0.0.1:8081/
      #domain: https://fs.elites.ink
    #如配置七牛，需在QiniuAutoConfigure.java配置类中指定自己的七牛云机房区域
    qiniu:
      accessKey: BiJfqMj5PRVdkckMCAlDZB_Aq6WPX7q3QksxIEPr
      secretKey: xxxxxxxxxxxxxxxxxxx
      bucket: free-dh
      path: xxxxxxxxxxxxxxxxxxx
    #aliyunOss配置
    aliyunOss:
      access-key: xxxxxxxxxxx
      secret-key: xxxxxxxxxxxx
      endPoint: oss-cn-beijing.aliyuncs.com
      bucket: xxxxxxx
      path: xxxxxxxxx
    #minio配置
    minio:
      access-key: kNKaJVWM36fP2xewIC3G
      secret-key: xxxxxxxxxxxxxxxxxx
      endpoint: http://xxxxxxx:9000
      bucket: test
      path: http://xxxxxxxx:9000/test

# 第三方登录配置
justauth:
  enabled: true
  type:
    GITEE:
      client-id: 9430a180ea8axxxxxxxxxxxxxxxxxxxxxx07c38d22be88xxxxxxdfb8c
      client-secret: b10aexxxxxxe2c16b50b56869460741f04xxxxxxxxxxxxxxxxxxxdb409ee
      redirect-uri: http://xxxxxxxx/oauth/callback/gitee
    GITHUB:
      client-id: ea6f9xxxxxx03f5b0fd
      client-secret: c60524386xxxxxx9cbef3caa7cxxxxxxxxxxe71474d
      redirect-uri: http://xxxxxx/oauth/callback/github

--- #Sa-Token 配置
sa-token:
  token-prefix: Bearer
  # token 名称（同时也是 cookie 名称）
  token-name: Authorization
  # jwt秘钥
  jwt-secret-key: asdasdasifhueuiwyurfewbfjsdafjk
  # token 有效期（单位：秒） 默认30天，-1 代表永久有效
  timeout: 2592000
  # token 最低活跃频率（单位：秒），如果 token 超过此时间没有访问系统就会被冻结，默认-1 代表不限制，永不冻结
  active-timeout: -1
  # 是否允许同一账号多地同时登录 （为 true 时允许一起登录, 为 false 时新登录挤掉旧登录）
  is-concurrent: true
  # 在多人登录同一账号时，是否共用一个 token （为 true 时所有登录共用一个 token, 为 false 时每次登录新建一个 token）
  is-share: true
  # token 风格（默认可取值：uuid、simple-uuid、random-32、random-64、random-128、tik）
  token-style: random-128
  # 是否输出操作日志
  is-log: true

--- # knife4j配置
knife4j:
  enabled: true
  setting:
    language: zh_cn